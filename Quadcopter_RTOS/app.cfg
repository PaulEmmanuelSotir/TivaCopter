var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
//var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 2048;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/*
 * Create and install logger for the whole system
 *//*
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;*/

System.SupportProxy = SysMin;
var task0Params = new Task.Params();
task0Params.instance.name = "IMUProcessing_Task";
task0Params.priority = 10;
Program.global.IMUProcessing_Task = Task.create("&IMUProcessingTask", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "IMUProcessing_Sem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.IMUProcessing_Sem = Semaphore.create(null, semaphore0Params);
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickPeriod = 2500;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "IMU_Clock";
clock0Params.period = 1;
clock0Params.startFlag = false;
Program.global.IMU_Clock = Clock.create("&IMUSensorsSwi", 1, clock0Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "I2C0_Hwi";
hwi0Params.eventId = -1;
hwi0Params.arg = "&d";
hwi0Params.enableInt = true;
Program.global.I2C0_Hwi = Hwi.create(24, "&I2C0HwiHandler", hwi0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "I2CStateMachine_Task";
task1Params.stackSize = 1024;
task1Params.stackHeap = null;
task1Params.priority = 14;
Program.global.I2CStateMachine_Task = Task.create("&I2CStateMachineTask", task1Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "I2CStateMachine_Sem";
Program.global.I2CStateMachine_Sem = Semaphore.create(null, semaphore1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "IMUReading_Task";
task2Params.priority = 10;
task2Params.stackSize = 1024;
Program.global.IMUReading_Task = Task.create("&IMUReadingTask", task2Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "IMUReading_Sem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.IMUReading_Sem = Semaphore.create(null, semaphore2Params);
BIOS.cpuFreq.lo = 120001220;
LoggingSetup.sysbiosSwiLogging = false;
LoggingSetup.loadLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 4096;
LoggingSetup.mainLoggerSize = 2048;
LoggingSetup.loadLogging = false;
LoggingSetup.sysbiosTaskLogging = true;
LoggingSetup.mainLogging = true;
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "UART3_Hwi";
Program.global.UART3_Hwi = Hwi.create(72, "&UART3IntHandler", hwi1Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "UARTConsole_Sem";
semaphore3Params.mode = Semaphore.Mode_COUNTING;
Program.global.UARTConsole_Sem = Semaphore.create(null, semaphore3Params);
var task3Params = new Task.Params();
task3Params.instance.name = "UARTConsole_Task";
task3Params.priority = 7;
task3Params.stackSize = 1024;
task3Params.vitalTaskFlag = true;
Program.global.UARTConsole_Task = Task.create("&UARTConsoleTask", task3Params);
Task.numPriorities = 16;
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "GPIOPE_Hwi";
Program.global.GPIOPE_Hwi = Hwi.create(20, "&GPIOPEHwi", hwi2Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "PID_Sem";
semaphore4Params.mode = Semaphore.Mode_BINARY;
Program.global.PID_Sem = Semaphore.create(null, semaphore4Params);
var task4Params = new Task.Params();
task4Params.instance.name = "PID_Task";
task4Params.stackSize = 1024;
task4Params.priority = 10;
Program.global.PID_Task = Task.create("&PIDTask", task4Params);
Task.defaultStackSize = 1024;
Clock.timerId = 0;
var clock1Params = new Clock.Params();
clock1Params.instance.name = "BatteryLevel_Clock";
clock1Params.startFlag = true;
clock1Params.period = 32;
Program.global.BatteryLevel_Clock = Clock.create("&BatteryLevelSwi", 32, clock1Params);
Clock.swiPriority = 15;
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "PeriodicJSON_Sem";
semaphore5Params.mode = Semaphore.Mode_BINARY;
Program.global.PeriodicJSON_Sem = Semaphore.create(null, semaphore5Params);
var task5Params = new Task.Params();
task5Params.instance.name = "PeriodicJSONDataSending_Task";
task5Params.priority = 6;
Program.global.PeriodicJSONDataSending_Task = Task.create("&PeriodicJSONDataSendingTask", task5Params);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "Mag_Sem";
semaphore6Params.mode = Semaphore.Mode_BINARY;
Program.global.Mag_Sem = Semaphore.create(null, semaphore6Params);
var task6Params = new Task.Params();
task6Params.instance.name = "SendCSVMagn_Task";
task6Params.priority = 6;
Program.global.SendCSVMagn_Task = Task.create("&SendCSVMagnTask", task6Params);
